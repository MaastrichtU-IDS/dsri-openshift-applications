---
kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: data-stewardship-wizard
  labels:
      template: data-stewardship-wizard
  annotations:
    openshift.io/display-name: Data Stewardship Wizard
    description: |-
      Start JupyterLab with the 'root' user using the image defined at https://github.com/vemonet/Jupyterlab

      ðŸ“‚ Use the `/notebooks` folder (workspace of the JupyterLab UI) to store your data in the existing persistent storage
      
      You can provide the URL to a GitHub/GitLab repository to be copied in the notebook automatically.
      The container will install requirements from files present at the root of the git repository (in this order):
      - packages.txt: install apt-get packages
      - requirements.txt: install pip packages
      - extensions.txt: install Jupyterlab extensions

      Visit https://github.com/vemonet/Jupyterlab for more details and to customize the image

      ðŸ”’ You need root containers enabled (aka. anyuid) in your project to start this application.
    iconClass: icon-shadowman
    tags: fair,data,management
    openshift.io/provider-display-name: Institute of Data Science, UM
    openshift.io/documentation-url: https://maastrichtu-ids.github.io/dsri-documentation/docs/deploy-jupyter
    openshift.io/support-url: https://maastrichtu-ids.github.io/dsri-documentation/help
    # template.openshift.io/bindable: 'false'
labels:
  template: data-stewardship-wizard
parameters:
- name: APPLICATION_NAME
  displayName: Application name
  description: Must be unique in the project. It will be used to generate the application
    URL.
  value: data-stewardship-wizard
  required: true
- name: PASSWORD
  displayName: password
  description: The password of the data stewardship wizard.
  from: "[a-zA-Z0-9]{16}"
  generate: expression
  required: true
# - name: GIT_REPOSITORY_URL
#   displayName: Git repository URL
#   description: URL to the Git repository that will be cloned. Dependencies from the
#     requirements.txt will be installed at runtime, and the repository will be cloned
#     in the workspace.
#   # value: https://github.com/vemonet/translator-sparql-notebook
#   required: false
- name: STORAGE_SIZE
  displayName: Storage size
  description: Size of the storage used for the notebook (approximate).
  value: 10Gi
  required: true
# - name: APPLICATION_IMAGE
#   displayName: Application Docker image
#   description: See https://github.com/vemonet/Jupyterlab for more details and to customize the image
#   value: ghcr.io/vemonet/jupyterlab:latest
#   required: true

objects:
# - apiVersion: v1
#   kind: Secret
#   metadata:
#     annotations:
#       template.openshift.io/expose-password: "{.data['application-password']}"
#     name: "${APPLICATION_NAME}"
#     labels:
#       app: "${APPLICATION_NAME}"
#   stringData:
#     application-password: "${PASSWORD}"
    
# - apiVersion: "v1"
#   kind: "PersistentVolumeClaim"
#   metadata:
#     name: ${APPLICATION_NAME}
#     labels:
#       app: "${APPLICATION_NAME}"
#   spec:
#     accessModes:
#       - "ReadWriteMany"
#     resources:
#       requests:
#         storage: ${STORAGE_SIZE}

# - kind: ImageStream
#   apiVersion: image.openshift.io/v1
#   metadata:
#     name: ${APPLICATION_NAME}
#     labels:
#       app: "${APPLICATION_NAME}"
#   spec:
#     tags:
#     - name: latest
#       from:
#         kind: DockerImage
#         name: ${APPLICATION_IMAGE}
#       importPolicy:
#         scheduled: true
#     lookupPolicy:
#       local: true

- kind: DeploymentConfig
  apiVersion: apps.openshift.io/v1
# - apiVersion: apps/v1
#   kind: Deployment
  metadata:
    name: rabbitmq
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    replicas: 1
    # strategy: {}
    selector:
      # matchLabels:
        app: "${APPLICATION_NAME}"
        deployment: "${APPLICATION_NAME}"
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deployment: "${APPLICATION_NAME}"
      spec:
        serviceAccountName: rabbitmq
        containers:
        - name: rabbitmq
          image: rabbitmq:3.8.2-management
          env:
          - name: RABBITMQ_DEFAULT_PASS
            value: guest
          - name: RABBITMQ_DEFAULT_USER
            value: guest
          # serviceAccountName: anyuid
          serviceAccountName: rabbitmq
          # nodeSelector:
          #   dsri.unimaas.nl/cpu: 'true'
          securityContext:
            runAsUser: 999
            runAsGroup: 999
            fsGroup: 2000
            supplementalGroups:
            - 999/1
            uidRange:
            - 0-999
          # resources: {}
          # THIS config SHOULD GO TO THE wizard server 
          volumeMounts:
            - name: config
              mountPath: "engine-wizard/config/application.yml"
        volumes:
        - name: config
          configMap:
            name: "${APPLICATION_NAME}-cfg"
            defaultMode: 420
        restartPolicy: Always
  # status: {}

- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-cfg"
    labels:
      app: "${APPLICATION_NAME}"
  data:
    application.yml: |
      general:
      clientUrl: http://localhost:8080
      secret: b7zFNUhFYIFLmDSFKFkp0Bnp8Z3uWGnH
      serviceToken: NlQSNbGvh7EtcpinGnHE9g91

    database:
      host: mongo
      databaseName: wizard
      port: 27017
      authEnabled: false
      username:
      password:

    messaging:
      username: guest
      password: guest

    mail:
      enabled: false
      name:
      email:
      host:
      port:
      ssl:
      authEnabled:
      username:
      password:

# - kind: DeploymentConfig
#   apiVersion: apps.openshift.io/v1
#   metadata:
#     name: "${APPLICATION_NAME}"
#     labels:
#       app: "${APPLICATION_NAME}"
#   spec:
#     strategy:
#       type: Recreate
#     triggers:
#     - type: ConfigChange
#     - type: ImageChange
#       imageChangeParams:
#         automatic: true
#         containerNames:
#         - jupyterlab-container
#         from:
#           kind: ImageStreamTag
#           name: ${APPLICATION_NAME}:latest
#     replicas: 1
#     selector:
#       app: "${APPLICATION_NAME}"
#       deploymentconfig: "${APPLICATION_NAME}"
#     template:
#       metadata:
#         labels:
#           app: "${APPLICATION_NAME}"
#           deploymentconfig: "${APPLICATION_NAME}"
#       spec:
#         serviceAccountName: anyuid
#         # nodeSelector:
#         #   dsri.unimaas.nl/cpu: 'true'
#         volumes:
#         - name: data
#           persistentVolumeClaim:
#             claimName: "${APPLICATION_NAME}"
#         # - name: data
#         #   persistentVolumeClaim:
#         #     claimName: "${STORAGE_NAME}"
#         containers:
#         - name: jupyterlab-container
#           image: ${APPLICATION_NAME}:latest
#           ports:
#           - containerPort: 8888
#             protocol: TCP
#           # resources:
#           #   limits:
#           #     cpu: '64'
#           #     memory: 200Gi
#           #   requests:
#           #     cpu: '2'
#           #     memory: 4Gi
#           volumeMounts:
#           - name: data
#             mountPath: "/notebooks"
#             # subPath: "${STORAGE_FOLDER}"
#           env:
#           - name: PASSWORD
#             valueFrom:
#               secretKeyRef:
#                 key: application-password
#                 name: "${APPLICATION_NAME}"
#           - name: GIT_URL
#             value: "${GIT_REPOSITORY_URL}"
#         automountServiceAccountToken: false

# - kind: Service
#   apiVersion: v1
#   metadata:
#     name: "${APPLICATION_NAME}"
#     labels:
#       app: "${APPLICATION_NAME}"
#   spec:
#     ports:
#     - name: 8888-tcp
#       protocol: TCP
#       port: 8888
#       targetPort: 8888
#     selector:
#       app: "${APPLICATION_NAME}"
#       deploymentconfig: "${APPLICATION_NAME}"
# - kind: Route
#   apiVersion: route.openshift.io/v1
#   metadata:
#     name: "${APPLICATION_NAME}"
#     labels:
#       app: "${APPLICATION_NAME}"
#   spec:
#     host: ''
#     to:
#       kind: Service
#       name: "${APPLICATION_NAME}"
#       weight: 100
#     port:
#       targetPort: 8888-tcp
#     tls:
#       termination: edge
#       insecureEdgeTerminationPolicy: Redirect
