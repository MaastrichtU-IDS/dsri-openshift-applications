---
kind: Template
apiVersion: v1
labels:
  template: jupyterlab-persistent
metadata:
  name: jupyterlab-persistent
  annotations:
    openshift.io/display-name: JupyterLab (Persistent)
    description: |-
      Start JupyterLab images with regular 'jovyan' user, without sudo privileges, and using an existing storage volume. 
      
      You can use any image based on the official Jupyter docker stack: https://github.com/jupyter/docker-stacks
      - jupyter/scipy-notebook
      - jupyter/datascience-notebook (with Julia kernel)
      - jupyter/tensorflow-notebook
      - jupyter/r-notebook
      - jupyter/pyspark-notebook
      - jupyter/all-spark-notebook
      - ghcr.io/maastrichtu-ids/jupyterlab-on-openshift:sparql (with SPARQL and Java kernels)
      Or build your own üì¶

      Once JupyterLab is deployed you can install pip packages and JupyterLab extensions, but nothing that requires root privileges (such as installing apt or yum packages)

      üóÑÔ∏è Data stored on an existing persistent storage in the specified folder
    iconClass: icon-python
    tags: python,jupyter,notebook,ephemeral
    openshift.io/provider-display-name: Institute of Data Science, UM
    openshift.io/documentation-url: https://maastrichtu-ids.github.io/dsri-documentation/docs/deploy-jupyter
    openshift.io/support-url: https://maastrichtu-ids.github.io/dsri-documentation/help
    template.openshift.io/bindable: 'false'
parameters:
- name: APPLICATION_NAME
  value: jupyterlab-persistent
  required: true
- name: NOTEBOOK_IMAGE
  value: jupyter/minimal-notebook:latest
  required: true
  description: You can use any image based on https://github.com/jupyter/docker-stacks
- name: PASSWORD
  from: "[a-f0-9]{32}"
  generate: expression
- name: STORAGE_NAME
  displayName: Storage name
  description: Name of the Persistent Volume Claim used for storage.
  value: pvc-mapr-projects-myproject
  required: true
- name: STORAGE_FOLDER
  displayName: Storage folder
  description: Path to the folder used to store your application data in the the Persistent Volume Claim (leave empty to use the root folder of the storage)
  value: jupyterlab-persistent
  required: false
# - name: MEMORY_LIMIT
#   displayName: Memory limit
#   description: Maximum RAM memory available for the application.
#   value: "5Gi"
#   required: true
# - name: CPU_LIMIT
#   displayName: CPU limit
#   description: Number of CPUs available for the application.
#   value: "2"
#   required: true

objects:
- kind: ConfigMap
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-cfg"
    labels:
      app: "${APPLICATION_NAME}"
  data:
    jupyter_notebook_config.py: |
      import os

      password = os.environ.get('JUPYTER_NOTEBOOK_PASSWORD')

      if password:
          import notebook.auth
          c.NotebookApp.password = notebook.auth.passwd(password)
          del password
          del os.environ['JUPYTER_NOTEBOOK_PASSWORD']

      image_config_file = '/home/jovyan/.jupyter/jupyter_notebook_config.py'

      if os.path.exists(image_config_file):
          with open(image_config_file) as fp:
              exec(compile(fp.read(), image_config_file, 'exec'), globals())

- apiVersion: "v1"
  kind: "PersistentVolumeClaim"
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    accessModes:
      - "ReadWriteMany"
    resources:
      requests:
        storage: ${STORAGE_SIZE}

- kind: DeploymentConfig
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ConfigChange
    replicas: 1
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
    template:
      metadata:
        annotations:
          alpha.image.policy.openshift.io/resolve-names: "*"
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}"
      spec:
        nodeSelector:
          dsri.unimaas.nl/cpu: 'true'
        containers:
        - name: jupyter-notebook
          image: "${NOTEBOOK_IMAGE}"
          command:
          - start-notebook.sh
          - "--config=/etc/jupyter/openshift/jupyter_notebook_config.py"
          - "--no-browser"
          - "--ip=0.0.0.0"
          ports:
          - containerPort: 8888
            protocol: TCP
          # SPARK UI
          - containerPort: 4040 
            protocol: TCP
          - containerPort: 4041
            protocol: TCP
          # resources:
          #   requests: 
          #     cpu: "${CPU_LIMIT}"
          #     memory: "${MEMORY_LIMIT}"
          #   limits:
          #     cpu: "128"
          #     memory: "300Gi"
          env:
          - name: JUPYTER_NOTEBOOK_PASSWORD
            value: "${PASSWORD}"
          - name: JUPYTER_ENABLE_LAB
            value: "yes"
          # - name: GRANT_SUDO
          #   value: "yes"
          volumeMounts:
          - name: configs
            mountPath: "/etc/jupyter/openshift"
          - name: data
            mountPath: "/home/jovyan"
            subPath: "${STORAGE_FOLDER}"
        automountServiceAccountToken: false
        securityContext:
          supplementalGroups:
          - 100
        volumes:
        - name: configs
          configMap:
            name: "${APPLICATION_NAME}-cfg"
        - name: data
          persistentVolumeClaim:
            claimName: "${STORAGE_NAME}"

- kind: Route
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    host: ''
    to:
      kind: Service
      name: "${APPLICATION_NAME}"
      weight: 100
    port:
      targetPort: 8888-tcp
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    ports:
    - name: 8888-tcp
      protocol: TCP
      port: 8888
      targetPort: 8888
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
    type: ClusterIP

- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}-spark-ui"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    ports:
    - name: 4040-tcp
      protocol: TCP
      port: 4040
      targetPort: 4040
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
    type: ClusterIP
