---
kind: Template
apiVersion: template.openshift.io/v1
metadata:
  name: jupyterlab-root
  annotations:
    openshift.io/display-name: JupyterLab with root user
    description: |-
      Start JupyterLab with sudo (root) privileges

      ðŸ“‚ Use the `/home/jovyan` folder (workspace of the JupyterLab UI) to store your data in the persistent storage
      
      You can use any image based on the official Jupyter docker stack: https://github.com/jupyter/docker-stacks
      - jupyter/scipy-notebook
      - jupyter/datascience-notebook (with Julia kernel)
      - jupyter/tensorflow-notebook
      - jupyter/r-notebook
      - jupyter/pyspark-notebook
      - jupyter/all-spark-notebook
      - ghcr.io/maastrichtu-ids/jupyterlab (with SPARQL and Java kernels)
      Or build your own ðŸ“¦

      Visit https://github.com/MaastrichtU-IDS/jupyterlab-on-openshift for more details, and to customize the image
    iconClass: icon-python
    tags: python,jupyter,notebook,root,persistent
    openshift.io/provider-display-name: Institute of Data Science, UM
    openshift.io/documentation-url: https://maastrichtu-ids.github.io/dsri-documentation/docs/deploy-jupyter
    openshift.io/support-url: https://maastrichtu-ids.github.io/dsri-documentation/help
    # template.openshift.io/bindable: 'false'
labels:
  template: jupyterlab-root
parameters:
- name: APPLICATION_NAME
  displayName: Application name
  description: Must be unique in the project. It will be used to generate the application
    URL.
  value: jupyterlab-root
  required: true
- name: PASSWORD
  displayName: Notebook password
  description: The password of the Jupyter Notebook.
  from: "[a-zA-Z0-9]{16}"
  generate: expression
  required: true
# - name: GIT_REPOSITORY_URL
#   displayName: Git repository URL
#   description: URL to the Git repository that will be cloned. Dependencies from the
#     requirements.txt will be installed at runtime, and the repository will be cloned
#     in the workspace.
#   # value: https://github.com/vemonet/translator-sparql-notebook
#   required: false
- name: STORAGE_SIZE
  displayName: Storage size
  description: Size of the storage used for the notebook (approximate).
  value: 10Gi
  required: true
- name: APPLICATION_IMAGE
  displayName: Application Docker image
  description: Based on jupyter/docker-stacks images
  value: ghcr.io/maastrichtu-ids/jupyterlab:latest
  required: true
# - name: STORAGE_NAME
#   displayName: Storage name
#   description: Name of the Persistent Volume Claim used for storage.
#   value: pvc-mapr-projects-myproject
#   required: true
# - name: STORAGE_FOLDER
#   displayName: Storage folder
#   description: Path to the folder used to store your application data in the the Persistent Volume Claim (leave empty to use the root folder of the storage)
#   value: jupyterlab-root
#   required: false
objects:
- apiVersion: v1
  kind: Secret
  metadata:
    annotations:
      template.openshift.io/expose-password: "{.data['application-password']}"
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  stringData:
    application-password: "${PASSWORD}"
    
- apiVersion: "v1"
  kind: "PersistentVolumeClaim"
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    accessModes:
      - "ReadWriteMany"
    resources:
      requests:
        storage: ${STORAGE_SIZE}

- kind: ImageStream
  apiVersion: image.openshift.io/v1
  metadata:
    name: ${APPLICATION_NAME}
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    tags:
    - name: latest
      from:
        kind: DockerImage
        name: ${APPLICATION_IMAGE}
      importPolicy:
        scheduled: true
    lookupPolicy:
      local: true

- kind: DeploymentConfig
  apiVersion: apps.openshift.io/v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    strategy:
      type: Recreate
    triggers:
    - type: ConfigChange
    - type: ImageChange
      imageChangeParams:
        automatic: true
        containerNames:
        - jupyterlab-container
        from:
          kind: ImageStreamTag
          name: ${APPLICATION_NAME}:latest
    replicas: 1
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
    template:
      metadata:
        labels:
          app: "${APPLICATION_NAME}"
          deploymentconfig: "${APPLICATION_NAME}"
      spec:
        serviceAccountName: anyuid
        # nodeSelector:
        #   dsri.unimaas.nl/cpu: 'true'
        # securityContext:
        #   runAsUser: 1000
        #   runAsGroup: 3000
        #   fsGroup: 2000
        volumes:
        - name: data
          persistentVolumeClaim:
            claimName: "${APPLICATION_NAME}"
        # - name: data
        #   persistentVolumeClaim:
        #     claimName: "${STORAGE_NAME}"
        containers:
        - name: jupyterlab-container
          image: ${APPLICATION_NAME}:latest
          ports:
          - containerPort: 8888
            protocol: TCP
          # resources:
          #   limits:
          #     cpu: '64'
          #     memory: 200Gi
          #   requests:
          #     cpu: '2'
          #     memory: 4Gi
          volumeMounts:
          - name: data
            mountPath: "/home/jovyan"
            # subPath: "${STORAGE_FOLDER}"
          securityContext:
            # Run as root https://dev.to/techworld_with_nana/run-pod-with-root-privileges-41n9
            allowPrivilegeEscalation: false
            runAsUser: 0
          env:
          - name: JUPYTER_TOKEN
            valueFrom:
              secretKeyRef:
                key: application-password
                name: "${APPLICATION_NAME}"
          - name: GRANT_SUDO
            value: "yes"
        automountServiceAccountToken: false

- kind: Service
  apiVersion: v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    ports:
    - name: 8888-tcp
      protocol: TCP
      port: 8888
      targetPort: 8888
    selector:
      app: "${APPLICATION_NAME}"
      deploymentconfig: "${APPLICATION_NAME}"
- kind: Route
  apiVersion: route.openshift.io/v1
  metadata:
    name: "${APPLICATION_NAME}"
    labels:
      app: "${APPLICATION_NAME}"
  spec:
    host: ''
    to:
      kind: Service
      name: "${APPLICATION_NAME}"
      weight: 100
    port:
      targetPort: 8888-tcp
    tls:
      termination: edge
      insecureEdgeTerminationPolicy: Redirect
